
/*
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../screens/chapters_screen.dart';
import '../screens/scenarios_screen.dart';
import '../screens/chapters_detail_view.dart';

import '../models/scenario.dart';
import '../models/chapter.dart';

import '../services/supabase_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(
  url: 'https://wlfwdtdtiedlcczfoslt.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsZndkdGR0aWVkbGNjemZvc2x0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjQ5MDAsImV4cCI6MjA2NzQ0MDkwMH0.OiWhZled2trJ7eTd8lpQ658B4p-IVsRp2HXHcgAUoFU',
  );
  
// Compatibility layer for packages still using the old TextTheme names
extension TextThemeCompatibility on TextTheme {
  TextStyle? get bodyText2  => bodyMedium;
  TextStyle? get bodyText1  => bodyLarge;
  TextStyle? get subtitle1  => titleMedium;
  TextStyle? get subtitle2  => titleSmall;
  // add more aliases here if you hit other missing getters
}
  runApp(WisdomGuideApp());
}


class WisdomGuideApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wisdom Guide',
      theme: ThemeData(
        fontFamily: 'Serif',
        scaffoldBackgroundColor: Colors.transparent,
      ),
     // home: MainNavigation(),
        home : RootScaffold(),
    );
  }
}

class MainNavigation extends StatefulWidget {
  @override
  _MainNavigationState createState() => _MainNavigationState();
}

class SplashScreen extends StatefulWidget {
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _MainNavigationState extends State<MainNavigation> {
  int _selectedIndex = 0;
  
  static final List<Widget> _pages = <Widget>[
    PlaceholderScreen(title: 'Home'),
    ChapterScreen(),
    ScenariosScreen(),
    PlaceholderScreen(title: 'Journal'),
    PlaceholderScreen(title: 'More'),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
          decoration: BoxDecoration(
            image: DecorationImage(
              image: AssetImage("assets/images/app_bg.png"),
              fit: BoxFit.cover,
            ),
          ),
        ),
        Scaffold(
          backgroundColor: Colors.transparent,
          body: Center(
            child: _pages.elementAt(_selectedIndex),
          ),
          bottomNavigationBar: BottomNavigationBar(
            type: BottomNavigationBarType.fixed,
            items: const <BottomNavigationBarItem>[
              BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
              BottomNavigationBarItem(icon: Icon(Icons.menu_book), label: 'Chapters'),
              BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
              BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
              BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
            ],
            currentIndex: _selectedIndex,
            selectedItemColor: Colors.brown,
            onTap: _onItemTapped,
          ),
        ),
      ],
    );
  }
}

class PlaceholderScreen extends StatelessWidget {
  final String title;
  const PlaceholderScreen({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
    );
  }
}

*/

/* START - COMMENTING BEFORE BOTTOM NAVIGATION FIX

import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:path_provider/path_provider.dart';
// import 'package:firebase_core/firebase_core.dart';
// import 'firebase_options.dart'; // generated by flutterfire_cli

//import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';

import 'dart:io';

import '../screens/home_screen.dart';
import '../screens/chapters_screen.dart';
import '../screens/scenarios_screen.dart';
import '../screens/journal_screen.dart';

// ADDITIONAL SCREENS UNDER ' MORE'

import '../services/settings_service.dart';
import '../services/audio_service.dart';

//import '../services/analytics_service.dart';

import '../screens/more_screen.dart';
import '../screens/references_screen.dart';
import '../screens/about_screen.dart';

//import '../assets/audio/Riverside_Morning_Calm.mp3';

import 'models/chapter.dart';         // 👈 Your model
import 'models/journal_entry.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(
    url: 'https://wlfwdtdtiedlcczfoslt.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsZndkdGR0aWVkbGNjemZvc2x0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjQ5MDAsImV4cCI6MjA2NzQ0MDkwMH0.OiWhZled2trJ7eTd8lpQ658B4p-IVsRp2HXHcgAUoFU',
  );
  
  // Initializing firebase
//  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  
    // HIVE SPECIFIC CODE
    
    // Initialize Hive with a path
  final appDocDir = await getApplicationDocumentsDirectory();
  Hive.init(appDocDir.path);
  //calling settings
  await SettingsService.init();
   // Register adapters
  Hive.registerAdapter(ChapterAdapter());
  Hive.registerAdapter(JournalEntryAdapter());

  // Open boxes
  await Hive.openBox<Chapter>('chapters');
 // await Hive.openBox<JournalEntry>('journal_entries');

// Try opening journal_entries; if a typeId mismatch occurs, delete & retry
  try {
    await Hive.openBox<JournalEntry>('journal_entries');
  } on HiveError {
    // wipe old box
    try {
      await Hive.deleteBoxFromDisk('journal_entries');
    } catch (e) {
      print('Error deleting journal_entries: $e');
    }
    // reopen fresh
    await Hive.openBox<JournalEntry>('journal_entries');
  } catch (e) {
    print('Unexpected error opening journal_entries: $e');
  }

 // 1. Initialize Hive & your settings box for setting ( color, font size )
  await Hive.initFlutter();
  await SettingsService.init();
  
  
    // load and start music
  final musicOn = await AudioService.instance.loadEnabled();
  if (musicOn) {
    await AudioService.instance.start();
  }
// AudioService.instance.playBackground('assets/audio/Riverside_Morning_Calm.mp3');

  runApp(const WisdomGuideApp());

 
}

/* BFEORE 'MORE SCREEN'
class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wisdom Guide',
      theme: ThemeData(
        fontFamily: 'Serif',
        scaffoldBackgroundColor: Colors.transparent,
      ),
      home: const SplashScreen(),
    );
  }
}

*/
class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({super.key});

 @override
  Widget build(BuildContext context) {
    // 2. Listen to changes in your settings Hive box
  //  return ValueListenableBuilder(
  //    valueListenable: Hive.box(SettingsService.boxName).listenable(),
    return ValueListenableBuilder<Box>(
     valueListenable: Hive.box(SettingsService.boxName).listenable(),
      builder: (context, Box box, _) {
        // 3a. Read dark / light
        final isDark = box.get(SettingsService.darkKey, defaultValue: false) as bool;

        // 3b. Read font size and map to a scale factor
        final fontPref = box.get(SettingsService.fontKey, defaultValue: 'medium') as String;
        double textScale;
        switch (fontPref) {
          case 'small':
            textScale = 0.85;
            break;
          case 'large':
            textScale = 1.15;
            break;
          case 'medium':
          default:
            textScale = 1.0;
        }

        return MaterialApp(
          debugShowCheckedModeBanner: false,

          // 4. Theme wiring
          theme: ThemeData.light(),
          darkTheme: ThemeData.dark(),
          themeMode: isDark ? ThemeMode.dark : ThemeMode.light,

          // 5. Apply text scale globally
          builder: (context, child) {
            return MediaQuery(
              data: MediaQuery.of(context).copyWith(textScaleFactor: textScale),
              child: child!,
            );
          },
        //  home: MainNavigation(),
          home: RootScaffold(),
        );
      },
    );
  }
  }
  
  
  class RootScaffold extends StatefulWidget {
  @override
  _RootScaffoldState createState() => _RootScaffoldState();
}
class _RootScaffoldState extends State<RootScaffold> {
  int _currentIndex = 0;
  final _pages = [
    //PlaceholderScreen(title: 'Home'),
    HomeScreen(),
    ChapterScreen(),
    ScenariosScreen(),
    //PlaceholderScreen(title: 'Journal'),
   // JournalScreen(), // MVP - Phase-2
    //PlaceholderScreen(title: 'More'),
    MoreScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (i) => setState(() => _currentIndex = i),
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.book), label: 'Chapters'),
          BottomNavigationBarItem(icon: Icon(Icons.list), label: 'Scenarios'),
          BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
          BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
          
        ],
      ),
    );
  }
}
  
// 🌸 Splash Screen with Glow + Animation
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _scaleController;
  late Animation<double> _scaleAnimation;
  late AnimationController _glowController;

  @override
  void initState() {
    super.initState();
    //Audio Service
    AudioService.instance.loadEnabled().then((on) {
    if (on) AudioService.instance.start();
    });

   _scaleController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );
    _scaleAnimation = Tween<double>(begin: 0.9, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.easeInOut),
    );
    _scaleController.forward();

    _glowController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    )..repeat(reverse: true);


    // ⏳ Navigate to MainNavigation after splash
    Future.delayed(const Duration(seconds: 3), () {
      Navigator.pushReplacement(
        context,
       // MaterialPageRoute(builder: (context) => MainNavigation()),
        MaterialPageRoute(builder: (context) => RootScaffold()),
      );
    });
  }

  @override
  void dispose() {
    _scaleController.dispose();
    _glowController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Image.asset(
          'assets/images/lotus_bg.jpg',
          fit: BoxFit.cover,
        ),
        Center(
          child: AnimatedBuilder(
            animation: _glowController,
            builder: (context, child) {
              return Container(
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.amber.withOpacity(0.3),
                      blurRadius: 20 + (_glowController.value * 10),
                      spreadRadius: 2,
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}

// 🧭 Main Navigation after splash
// START - BEFORE FULL NAVIGATION
// class MainNavigation extends StatefulWidget {
//  @override
//  _MainNavigationState createState() => _MainNavigationState();
// }

class MainNavigation extends StatefulWidget {
  const MainNavigation({Key? key}) : super(key: key);
  @override
  _MainNavigationState  createState() => _MainNavigationState();
}

class _MainNavigationState extends State<MainNavigation> {
  int _selectedIndex = 0;

  static final List<Widget> _pages = <Widget>[
    //PlaceholderScreen(title: 'Home'),
    HomeScreen(),
    ChapterScreen(),
    ScenariosScreen(),
    //PlaceholderScreen(title: 'Journal'),
   // JournalScreen(), // MVP - Phase-2
    //PlaceholderScreen(title: 'More'),
    MoreScreen(),
  ];
  
  final List<BottomNavigationBarItem> _navItems = const [
    BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
    BottomNavigationBarItem(icon: Icon(Icons.book), label: 'Chapters'),
    BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
    BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

// START - ALL SCREENS NAVIGATION

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
          decoration: const BoxDecoration(
            image: DecorationImage(
              image: AssetImage("assets/images/divine_scroll_bg.png"),
              fit: BoxFit.cover,
            ),
          ),
        ),
        Scaffold(
          backgroundColor: Colors.transparent,
          body: Center(
            child: _pages.elementAt(_selectedIndex),
          ),
          bottomNavigationBar: BottomNavigationBar(
            type: BottomNavigationBarType.fixed,
            items: const <BottomNavigationBarItem>[
              BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
              BottomNavigationBarItem(icon: Icon(Icons.menu_book), label: 'Chapters'),
              BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
            //  BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
              BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
            ],
            currentIndex: _selectedIndex,
            selectedItemColor: Colors.brown,
            onTap: _onItemTapped,
          ),
        ),
      ],
    );
  }
 //FINISH ALL STATES NAVIGATION
 
 @override
  Widget build(BuildContext context) {
    assert(_pages.length == _navItems.length,
      'Pages length (${_pages.length}) must match nav items length (${_navItems.length})');

    // clamp in case something tries to set a bad index
    final safeIndex = _currentIndex.clamp(0, _pages.length - 1);

    return Scaffold(
      body: IndexedStack(
                currentIndex: safeIndex,
        children: _pages,
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: safeIndex,
        items: _navItems,
        onTap: (i) {
          setState(() {
            // if someone taps the same tab, you could pop to root, etc.
            _currentIndex = i.clamp(0, _pages.length - 1);
          });
        },
      ),
    );
  }
  
}

class PlaceholderScreen extends StatelessWidget {
  final String title;
  const PlaceholderScreen({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
    );
  }
}

*/

// lib/main.dart

import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:google_fonts/google_fonts.dart'; // FOR GOOGLE FONT


import 'models/chapter.dart';
import 'models/journal_entry.dart';
import '../widgets/custom_nav_bar.dart';
import '../services/settings_service.dart';
import 'services/audio_service.dart';
import 'config/environment.dart'; // 👈 Import our environment config

import 'screens/home_screen.dart';
import 'screens/chapters_screen.dart';
import 'screens/scenarios_screen.dart';
import 'screens/more_screen.dart';

import 'package:flutter_svg/flutter_svg.dart';
// lib/main.dart


void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  try {
    // ✅ Validate environment configuration first
    Environment.validateConfiguration();

    // ✅ Initialize Supabase with environment variables
    await Supabase.initialize(
      url: Environment.supabaseUrl,
      anonKey: Environment.supabaseAnonKey,
      // Optional: Add additional configuration
      authOptions: FlutterAuthClientOptions(
        authFlowType: AuthFlowType.pkce, // More secure auth flow
      ),
      realtimeClientOptions: const RealtimeClientOptions(
        logLevel: RealtimeLogLevel.info, // Adjust based on environment
      ),
    );

    // ✅ Hive setup
    final appDocDir = await getApplicationDocumentsDirectory();
    Hive.init(appDocDir.path);
    await SettingsService.init();

    // Register adapters
    Hive.registerAdapter(ChapterAdapter());
    Hive.registerAdapter(JournalEntryAdapter());

    // Open boxes with error handling
    await Hive.openBox<Chapter>('chapters');

    try {
      await Hive.openBox<JournalEntry>('journal_entries');
    } on HiveError {
      // Clean slate if there's a schema mismatch
      await Hive.deleteBoxFromDisk('journal_entries');
      await Hive.openBox<JournalEntry>('journal_entries');
    }

    // ✅ Audio service initialization
    final musicEnabled = await AudioService.instance.loadEnabled();
    if (musicEnabled) {
      await AudioService.instance.start();
    }

    // ✅ Log successful initialization (safe for production)
    if (Environment.enableLogging) {
      debugPrint('🚀 GitaWisdom initialized successfully');
      debugPrint('📊 Config: ${Environment.getConfigSummary()}');
    }

    runApp(const WisdomGuideApp());

  } catch (error, stackTrace) {
    // ✅ Graceful error handling
    debugPrint('❌ Initialization failed: $error');
    debugPrint('Stack trace: $stackTrace');

    // You might want to show an error screen or fallback UI
    runApp(InitializationErrorApp(error: error));
  }
}

/// Error app shown when initialization fails
class InitializationErrorApp extends StatelessWidget {
  final Object error;

  const InitializationErrorApp({
    Key? key,
    required this.error,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GitaWisdom - Configuration Error',
      home: Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.error_outline,
                  size: 64,
                  color: Colors.red,
                ),
                const SizedBox(height: 16),
                const Text(
                  'Configuration Error',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                Text(
                  'The app could not initialize properly. Please check your configuration.',
                  textAlign: TextAlign.center,
                  style: TextStyle(color: Colors.grey[600]),
                ),
                if (Environment.isDevelopment) ...[
                  const SizedBox(height: 16),
                  Text(
                    'Error: $error',
                    textAlign: TextAlign.center,
                    style: const TextStyle(
                      fontSize: 12,
                      fontFamily: 'monospace',
                      color: Colors.red,
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }
}

  /*  // — Supabase
  await Supabase.initialize(
    url: 'https://wlfwdtdtiedlcczfoslt.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsZndkdGR0aWVkbGNjemZvc2x0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjQ5MDAsImV4cCI6MjA2NzQ0MDkwMH0.OiWhZled2trJ7eTd8lpQ658B4p-IVsRp2HXHcgAUoFU',
  );

  // — Hive setup
  final appDocDir = await getApplicationDocumentsDirectory();
  Hive.init(appDocDir.path);
  await SettingsService.init();

  Hive.registerAdapter(ChapterAdapter());
  Hive.registerAdapter(JournalEntryAdapter());

  await Hive.openBox<Chapter>('chapters');
  try {
    await Hive.openBox<JournalEntry>('journal_entries');
  } on HiveError {
    await Hive.deleteBoxFromDisk('journal_entries');
    await Hive.openBox<JournalEntry>('journal_entries');
  }

  // — Audio
  final musicOn = await AudioService.instance.loadEnabled();
  if (musicOn) await AudioService.instance.start();

  runApp(const WisdomGuideApp());
}
  */



class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({Key? key}) : super(key: key);

  TextTheme _buildTextThemeWithShadows(TextTheme baseTheme, bool shadowEnabled) {
    final shadows = shadowEnabled ? [
      const Shadow(
        color: Colors.black45,
        offset: Offset(1.0, 1.0),
        blurRadius: 2.0,
      ),
    ] : <Shadow>[];

    return baseTheme.copyWith(
      displayLarge: baseTheme.displayLarge?.copyWith(shadows: shadows),
      displayMedium: baseTheme.displayMedium?.copyWith(shadows: shadows),
      displaySmall: baseTheme.displaySmall?.copyWith(shadows: shadows),
      headlineLarge: baseTheme.headlineLarge?.copyWith(shadows: shadows),
      headlineMedium: baseTheme.headlineMedium?.copyWith(shadows: shadows),
      headlineSmall: baseTheme.headlineSmall?.copyWith(shadows: shadows),
      titleLarge: baseTheme.titleLarge?.copyWith(shadows: shadows),
      titleMedium: baseTheme.titleMedium?.copyWith(shadows: shadows),
      titleSmall: baseTheme.titleSmall?.copyWith(shadows: shadows),
      bodyLarge: baseTheme.bodyLarge?.copyWith(shadows: shadows),
      bodyMedium: baseTheme.bodyMedium?.copyWith(shadows: shadows),
      bodySmall: baseTheme.bodySmall?.copyWith(shadows: shadows),
      labelLarge: baseTheme.labelLarge?.copyWith(shadows: shadows),
      labelMedium: baseTheme.labelMedium?.copyWith(shadows: shadows),
      labelSmall: baseTheme.labelSmall?.copyWith(shadows: shadows),
    );
  }

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<Box>(
      valueListenable: Hive.box(SettingsService.boxName).listenable(),
      builder: (context, box, _) {
        final isDark = box.get(SettingsService.darkKey, defaultValue: false) as bool;
        final fontPref = box.get(SettingsService.fontKey, defaultValue: 'medium') as String;
        final shadowEnabled = box.get(SettingsService.shadowKey, defaultValue: true) as bool;
        final backgroundOpacity = box.get(SettingsService.opacityKey, defaultValue: 0.3) as double;
        
        double textScale;
        switch (fontPref) {
          case 'small':    textScale = 0.85; break;
          case 'large':    textScale = 1.25; break;
          default:         textScale = 1.0;
        }

        return MaterialApp(
          debugShowCheckedModeBanner: false,
          theme: ThemeData.light().copyWith(
            scaffoldBackgroundColor: Colors.transparent,
            textTheme: _buildTextThemeWithShadows(
              GoogleFonts.poppinsTextTheme(ThemeData.light().textTheme),
              shadowEnabled,
            ),
            cardTheme: CardThemeData(
              color: ThemeData.light().colorScheme.surface,
              elevation: 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
              margin: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
          darkTheme: ThemeData.dark().copyWith(
            scaffoldBackgroundColor: Colors.transparent,
            textTheme: _buildTextThemeWithShadows(
              GoogleFonts.poppinsTextTheme(ThemeData.dark().textTheme),
              shadowEnabled,
            ),
            cardTheme: CardThemeData(
              color: ThemeData.dark().colorScheme.surface,
              elevation: 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
              margin: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
          themeMode: isDark ? ThemeMode.dark : ThemeMode.light,
          builder: (context, child) {
            final mq = MediaQuery.of(context).copyWith(textScaler: TextScaler.linear(textScale));
            return MediaQuery(
              data: mq,
              child: Stack(
                children: [
                  Positioned.fill(
                    child: Opacity(
                      opacity: backgroundOpacity,
                      child: Image.asset('assets/images/app_bg.png', fit: BoxFit.cover),
                    ),
                  ),
                  if (child != null) child,
                ],
              ),
            );
          },
          home: const SplashScreen(),
        );
      },
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin {
  @override
  void initState() {
    super.initState();
    // Navigate to root after 3 seconds
    Future.delayed(const Duration(seconds: 3), () {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (_) => const RootScaffold()),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      fit: StackFit.expand,
      children: [
        // Full-screen GIF background
        Image.asset('assets/app_bg.png', fit: BoxFit.cover),
        // Centered SVG or Lottie animation placeholder
      ],
    );
  }
}

class RootScaffold extends StatefulWidget {
  const RootScaffold({Key? key}) : super(key: key);
  @override
  State<RootScaffold> createState() => _RootScaffoldState();
}

class _RootScaffoldState extends State<RootScaffold> {
  static _RootScaffoldState? _instance;
  int _currentIndex = 0;

  static void goToTab(int index) => _instance?._selectTab(index);

  @override
  void initState() {
    super.initState();
    _instance = this;
  }
  @override
  void dispose() {
    _instance = null;
    super.dispose();
  }

  void _selectTab(int index) {
    if (index == _currentIndex) {
      _navigatorKeys[index].currentState?.popUntil((r) => r.isFirst);
    } else {
      setState(() => _currentIndex = index);
    }
  }

  static const _pages = [
    HomeScreen(),
    ChapterScreen(),
    ScenariosScreen(),
    MoreScreen(),
  ];

  final _navigatorKeys = List.generate(4, (_) => GlobalKey<NavigatorState>());

  Widget _buildOffstageNavigator(int idx, Widget screen) {
    return Offstage(
      offstage: _currentIndex != idx,
      child: Navigator(
        key: _navigatorKeys[idx],
        onGenerateRoute: (_) => MaterialPageRoute(builder: (_) => screen),
      ),
    );
  }

  Future<bool> _onWillPop() async {
    final isFirst = !await _navigatorKeys[_currentIndex].currentState!.maybePop();
    if (isFirst) {
      if (_currentIndex != 0) {
        setState(() => _currentIndex = 0);
        return false;
      }
      return true;
    }
    return false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        body: Stack(
          children: List.generate(_pages.length, (i) => _buildOffstageNavigator(i, _pages[i])),
        ),
        bottomNavigationBar: CustomNavBar(
          currentIndex: _currentIndex,
          onTap: (i) => _selectTab(i),
          items:  const [
            NavBarItem(icon: Icons.home, label: 'Home'),
            NavBarItem(icon: Icons.menu_book, label: 'Chapters'),
            NavBarItem(icon: Icons.list, label: 'Scenarios'),
            NavBarItem(icon: Icons.more_horiz, label: 'More'),
          ],
        ),
      ),
    );
  }
}
