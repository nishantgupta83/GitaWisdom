
/*
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../screens/chapters_screen.dart';
import '../screens/scenarios_screen.dart';
import '../screens/chapters_detail_view.dart';

import '../models/scenario.dart';
import '../models/chapter.dart';

import '../services/supabase_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
// Compatibility layer for packages still using the old TextTheme names
extension TextThemeCompatibility on TextTheme {
  TextStyle? get bodyText2  => bodyMedium;
  TextStyle? get bodyText1  => bodyLarge;
  TextStyle? get subtitle1  => titleMedium;
  TextStyle? get subtitle2  => titleSmall;
  // add more aliases here if you hit other missing getters
}
  runApp(WisdomGuideApp());
}


class WisdomGuideApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wisdom Guide',
      theme: ThemeData(
        fontFamily: 'Serif',
        scaffoldBackgroundColor: Colors.transparent,
      ),
     // home: MainNavigation(),
        home : RootScaffold(),
    );
  }
}

class MainNavigation extends StatefulWidget {
  @override
  _MainNavigationState createState() => _MainNavigationState();
}

class SplashScreen extends StatefulWidget {
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _MainNavigationState extends State<MainNavigation> {
  int _selectedIndex = 0;
  
  static final List<Widget> _pages = <Widget>[
    PlaceholderScreen(title: 'Home'),
    ChapterScreen(),
    ScenariosScreen(),
    PlaceholderScreen(title: 'Journal'),
    PlaceholderScreen(title: 'More'),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
          decoration: BoxDecoration(
            image: DecorationImage(
              image: AssetImage("assets/images/app_bg.png"),
              fit: BoxFit.cover,
            ),
          ),
        ),
        Scaffold(
          backgroundColor: Colors.transparent,
          body: Center(
            child: _pages.elementAt(_selectedIndex),
          ),
          bottomNavigationBar: Container(
            margin: const EdgeInsets.only(bottom: 10), // Push navigation bar down
            child: BottomNavigationBar(
              type: BottomNavigationBarType.fixed,
              items: const <BottomNavigationBarItem>[
                BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
                BottomNavigationBarItem(icon: Icon(Icons.menu_book), label: 'Chapters'),
                BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
                BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
                BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
              ],
              currentIndex: _selectedIndex,
              selectedItemColor: Colors.brown,
              onTap: _onItemTapped,
            ),
          ),
        ),
      ],
    );
  }
}

class PlaceholderScreen extends StatelessWidget {
  final String title;
  const PlaceholderScreen({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
    );
  }
}

*/

/* START - COMMENTING BEFORE BOTTOM NAVIGATION FIX

import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:path_provider/path_provider.dart';
// import 'package:firebase_core/firebase_core.dart';
// import 'firebase_options.dart'; // generated by flutterfire_cli

//import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';

import 'dart:io' show Platform;

import '../screens/home_screen.dart';
import '../screens/chapters_screen.dart';
import '../screens/scenarios_screen.dart';
import '../screens/journal_screen.dart';

// ADDITIONAL SCREENS UNDER ' MORE'

import '../services/settings_service.dart';
import '../services/audio_service.dart';

//import '../services/analytics_service.dart';

import '../screens/more_screen.dart';
import '../screens/references_screen.dart';
import '../screens/about_screen.dart';

//import '../assets/audio/Riverside_Morning_Calm.mp3';

import 'models/chapter.dart';         // 👈 Your model
import 'models/journal_entry.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(
    url: 'https://wlfwdtdtiedlcczfoslt.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsZndkdGR0aWVkbGNjemZvc2x0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjQ5MDAsImV4cCI6MjA2NzQ0MDkwMH0.OiWhZled2trJ7eTd8lpQ658B4p-IVsRp2HXHcgAUoFU',
  );
  
  // Initializing firebase
//  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  
    // HIVE SPECIFIC CODE
    
    // Initialize Hive with a path
  final appDocDir = await getApplicationDocumentsDirectory();
  Hive.init(appDocDir.path);
  //calling settings
  await SettingsService.init();
   // Register adapters
  Hive.registerAdapter(ChapterAdapter());
  Hive.registerAdapter(JournalEntryAdapter());

  // Open boxes
  await Hive.openBox<Chapter>('chapters');
 // await Hive.openBox<JournalEntry>('journal_entries');

// Try opening journal_entries; if a typeId mismatch occurs, delete & retry
  try {
    await Hive.openBox<JournalEntry>('journal_entries');
  } on HiveError {
    // wipe old box
    try {
      await Hive.deleteBoxFromDisk('journal_entries');
    } catch (e) {
      print('Error deleting journal_entries: $e');
    }
    // reopen fresh
    await Hive.openBox<JournalEntry>('journal_entries');
  } catch (e) {
    print('Unexpected error opening journal_entries: $e');
  }

 // 1. Initialize Hive & your settings box for setting ( color, font size )
  await Hive.initFlutter();
  await SettingsService.init();
  
  
    // load and start music
  final musicOn = await AudioService.instance.loadEnabled();
  if (musicOn) {
    await AudioService.instance.start();
  }
// AudioService.instance.playBackground('assets/audio/Riverside_Morning_Calm.mp3');

  runApp(const WisdomGuideApp());

 
}

/* BFEORE 'MORE SCREEN'
class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wisdom Guide',
      theme: ThemeData(
        fontFamily: 'Serif',
        scaffoldBackgroundColor: Colors.transparent,
      ),
      home: const SplashScreen(),
    );
  }
}

*/
class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({super.key});


 @override
  Widget build(BuildContext context) {
    // 2. Listen to changes in your settings Hive box
  //  return ValueListenableBuilder(
  //    valueListenable: Hive.box(SettingsService.boxName).listenable(),
    return ValueListenableBuilder<Box>(
     valueListenable: Hive.box(SettingsService.boxName).listenable(),
      builder: (context, Box box, _) {
        // 3a. Read dark / light
        final isDark = box.get(SettingsService.darkKey, defaultValue: false) as bool;

        // 3b. Read font size and map to a scale factor
        final fontPref = box.get(SettingsService.fontKey, defaultValue: 'medium') as String;
        double textScale;
        switch (fontPref) {
          case 'small':
            textScale = 0.85;
            break;
          case 'large':
            textScale = 1.15;
            break;
          case 'medium':
          default:
            textScale = 1.0;
        }

        return MaterialApp(
          debugShowCheckedModeBanner: false,

          // 4. Theme wiring
          theme: ThemeData.light(),
          darkTheme: ThemeData.dark(),
          themeMode: isDark ? ThemeMode.dark : ThemeMode.light,

          // 5. Apply text scale globally
          builder: (context, child) {
            return MediaQuery(
              data: MediaQuery.of(context).copyWith(textScaleFactor: textScale),
              child: child!,
            );
          },
        //  home: MainNavigation(),
          home: RootScaffold(),
        );
      },
    );
  }
  }
  
  
  class RootScaffold extends StatefulWidget {
  @override
  _RootScaffoldState createState() => _RootScaffoldState();
}
class _RootScaffoldState extends State<RootScaffold> {
  int _currentIndex = 0;
  List<Widget> _getPages() => [
    //PlaceholderScreen(title: 'Home'),
    HomeScreen(onTabChange: (index) => setState(() => _currentIndex = index)),
    ChapterScreen(),
    ScenariosScreen(),
    //PlaceholderScreen(title: 'Journal'),
   // JournalScreen(), // MVP - Phase-2
    //PlaceholderScreen(title: 'More'),
    MoreScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    final pages = _getPages();
    return Scaffold(
      body: pages[_currentIndex],
      bottomNavigationBar: Container(
        margin: const EdgeInsets.only(bottom: 10), // Push navigation bar down
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          onTap: (i) => setState(() => _currentIndex = i),
          items: const [
            BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
            BottomNavigationBarItem(icon: Icon(Icons.book), label: 'Chapters'),
            BottomNavigationBarItem(icon: Icon(Icons.list), label: 'Scenarios'),
            BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
            BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
            
          ],
        ),
      ),
    );
  }
}
  
// 🌸 Splash Screen with Glow + Animation
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _scaleController;
  late Animation<double> _scaleAnimation;
  late AnimationController _glowController;

  @override
  void initState() {
    super.initState();
    //Audio Service
    AudioService.instance.loadEnabled().then((on) {
    if (on) AudioService.instance.start();
    });

   _scaleController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );
    _scaleAnimation = Tween<double>(begin: 0.9, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.easeInOut),
    );
    _scaleController.forward();

    _glowController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    )..repeat(reverse: true);


    // ⏳ Navigate to MainNavigation after splash
    Future.delayed(const Duration(seconds: 3), () {
      Navigator.pushReplacement(
        context,
       // MaterialPageRoute(builder: (context) => MainNavigation()),
        MaterialPageRoute(builder: (context) => RootScaffold()),
      );
    });
  }

  @override
  void dispose() {
    _scaleController.dispose();
    _glowController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      fit: StackFit.expand,
      children: [
        Image.asset(
          'assets/images/lotus_bg.jpg',
          fit: BoxFit.cover,
        ),
        Center(
          child: AnimatedBuilder(
            animation: _glowController,
            builder: (context, child) {
              return Container(
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.amber.withOpacity(0.3),
                      blurRadius: 20 + (_glowController.value * 10),
                      spreadRadius: 2,
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
}

// 🧭 Main Navigation after splash
// START - BEFORE FULL NAVIGATION
// class MainNavigation extends StatefulWidget {
//  @override
//  _MainNavigationState createState() => _MainNavigationState();
// }

class MainNavigation extends StatefulWidget {
  const MainNavigation({Key? key}) : super(key: key);
  @override
  _MainNavigationState  createState() => _MainNavigationState();
}

class _MainNavigationState extends State<MainNavigation> {
  int _selectedIndex = 0;

  static final List<Widget> _pages = <Widget>[
    //PlaceholderScreen(title: 'Home'),
    HomeScreen(),
    ChapterScreen(),
    ScenariosScreen(),
    //PlaceholderScreen(title: 'Journal'),
   // JournalScreen(), // MVP - Phase-2
    //PlaceholderScreen(title: 'More'),
    MoreScreen(),
  ];
  
  final List<BottomNavigationBarItem> _navItems = const [
    BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
    BottomNavigationBarItem(icon: Icon(Icons.book), label: 'Chapters'),
    BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
    BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

// START - ALL SCREENS NAVIGATION

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
          decoration: const BoxDecoration(
            image: DecorationImage(
              image: AssetImage("assets/images/divine_scroll_bg.png"),
              fit: BoxFit.cover,
            ),
          ),
        ),
        Scaffold(
          backgroundColor: Colors.transparent,
          body: Center(
            child: _pages.elementAt(_selectedIndex),
          ),
          bottomNavigationBar: Container(
            margin: const EdgeInsets.only(bottom: 10), // Push navigation bar down
            child: BottomNavigationBar(
              type: BottomNavigationBarType.fixed,
              items: const <BottomNavigationBarItem>[
                BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
                BottomNavigationBarItem(icon: Icon(Icons.menu_book), label: 'Chapters'),
                BottomNavigationBarItem(icon: Icon(Icons.filter_list), label: 'Scenarios'),
              //  BottomNavigationBarItem(icon: Icon(Icons.edit), label: 'Journal'),
                BottomNavigationBarItem(icon: Icon(Icons.more_horiz), label: 'More'),
              ],
              currentIndex: _selectedIndex,
              selectedItemColor: Colors.brown,
              onTap: _onItemTapped,
            ),
          ),
        ),
      ],
    );
  }
 //FINISH ALL STATES NAVIGATION
 
 @override
  Widget build(BuildContext context) {
    assert(_pages.length == _navItems.length,
      'Pages length (${_pages.length}) must match nav items length (${_navItems.length})');

    // clamp in case something tries to set a bad index
    final safeIndex = _currentIndex.clamp(0, _pages.length - 1);

    return Scaffold(
      body: IndexedStack(
                currentIndex: safeIndex,
        children: _pages,
      ),
      bottomNavigationBar: Container(
        margin: const EdgeInsets.only(bottom: 10), // Push navigation bar down
        child: BottomNavigationBar(
          currentIndex: safeIndex,
          items: _navItems,
          onTap: (i) {
            setState(() {
              // if someone taps the same tab, you could pop to root, etc.
              _currentIndex = i.clamp(0, _pages.length - 1);
            });
          },
        ),
      ),
    );
  }
  
}

class PlaceholderScreen extends StatelessWidget {
  final String title;
  const PlaceholderScreen({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
    );
  }
}

*/

// lib/main.dart

import 'dart:io' show Platform;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:google_fonts/google_fonts.dart'; // FOR GOOGLE FONT

import 'l10n/app_localizations.dart';

import 'models/daily_verse_set.dart';
import 'models/chapter_summary.dart';
import 'models/verse.dart';
import 'models/scenario.dart';
import 'services/daily_verse_service.dart';
import 'services/scenario_service.dart';
import 'services/journal_service.dart';
/* MOVED TO UNUSED: import 'services/favorites_service.dart'; */


import 'models/chapter.dart';
import 'models/journal_entry.dart';
/* MOVED TO UNUSED: import 'models/user_favorite.dart'; */
/* MULTILANG_TODO: import 'models/supported_language.dart'; */
/* MOVED TO UNUSED: import 'models/daily_quote.dart'; */
import 'widgets/custom_nav_bar.dart';
import 'services/settings_service.dart';
import 'services/audio_service.dart';
import 'services/app_lifecycle_manager.dart';
import 'services/service_locator.dart';
import 'config/environment.dart'; // 👈 Import our environment config

import 'screens/home_screen.dart';
import 'screens/chapters_screen.dart';
import 'screens/scenarios_screen.dart';
import 'screens/more_screen.dart';
// lib/main.dart


void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Set full-screen app layout - ensure app uses full device size
  // Modern edge-to-edge handling compatible with Android 15
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
  
  // Only set SystemUiOverlayStyle on platforms where it's still effective (not Android 15+)
  // Android 15+ handles this through styles.xml configuration
  if (Platform.isIOS || Platform.isMacOS) {
    SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.light,
      systemNavigationBarColor: Colors.transparent,
      systemNavigationBarDividerColor: Colors.transparent,
    ));
  }

  try {
    // ✅ Critical initialization only - everything else will be lazy loaded
    Environment.validateConfiguration();

    // ✅ Initialize Supabase (essential for app functionality)
    await Supabase.initialize(
      url: Environment.supabaseUrl,
      anonKey: Environment.supabaseAnonKey,
    );

    // ✅ Basic Hive setup only
    final appDocDir = await getApplicationDocumentsDirectory();
    Hive.init(appDocDir.path);
    await SettingsService.init();

    runApp(const WisdomGuideApp());

  } catch (error, stackTrace) {
    debugPrint('❌ Critical initialization failed: $error');
    debugPrint('Stack trace: $stackTrace');
    runApp(InitializationErrorApp(error: error));
  }
}

// Lazy initialization function called after app starts
Future<void> _initializeAppServices() async {
  try {
    // Register Hive adapters
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(JournalEntryAdapter()); // typeId: 0
    }
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(ChapterAdapter()); // typeId: 1
    }
    if (!Hive.isAdapterRegistered(2)) {
      Hive.registerAdapter(DailyVerseSetAdapter()); // typeId: 2
    }
    if (!Hive.isAdapterRegistered(3)) {
      Hive.registerAdapter(ChapterSummaryAdapter()); // typeId: 3
    }
    if (!Hive.isAdapterRegistered(4)) {
      Hive.registerAdapter(VerseAdapter()); // typeId: 4
    }
    if (!Hive.isAdapterRegistered(5)) {
      Hive.registerAdapter(ScenarioAdapter()); // typeId: 5
    }
    /* MOVED TO UNUSED: UserFavoriteAdapter
    if (!Hive.isAdapterRegistered(6)) {
      Hive.registerAdapter(UserFavoriteAdapter()); // typeId: 6
    }
    */
    /* MULTILANG_TODO: SupportedLanguage adapter
    if (!Hive.isAdapterRegistered(10)) {
      Hive.registerAdapter(SupportedLanguageAdapter()); // typeId: 10
    }
    */
    /* MOVED TO UNUSED: DailyQuoteAdapter
    if (!Hive.isAdapterRegistered(11)) {
      Hive.registerAdapter(DailyQuoteAdapter()); // typeId: 11
    }
    */

    // Open boxes with error handling
    if (!Hive.isBoxOpen('chapters')) {
      await Hive.openBox<Chapter>('chapters');
    }

    if (!Hive.isBoxOpen('journal_entries')) {
      try {
        await Hive.openBox<JournalEntry>('journal_entries');
      } on HiveError {
        await Hive.deleteBoxFromDisk('journal_entries');
        await Hive.openBox<JournalEntry>('journal_entries');
      }
    }

    // Open daily verse service box
    await DailyVerseService.instance.initialize();
    
    // Open scenario service box
    await ScenarioService.instance.initialize();
    
    // Pre-load scenarios during app initialization to avoid empty state on first load
    ScenarioService.instance.getAllScenarios().catchError((e) {
      debugPrint('Background scenario pre-loading failed: $e');
      return <Scenario>[]; // Return empty list on error
    });
    
    // Open journal service box
    await JournalService.instance.initialize();
    
    // MOVED TO UNUSED: FavoritesService initialization
    /* await FavoritesService.instance.initialize(); */

    // Initialize Enhanced Supabase Service via Service Locator
    await ServiceLocator.instance.initialize();
    
    // Test Supabase connection
    try {
      final isConnected = await ServiceLocator.instance.enhancedSupabaseService.testConnection();
      if (!isConnected) {
        debugPrint('⚠️ Warning: Supabase connection failed - app may not load content properly');
      }
    } catch (e) {
      debugPrint('❌ Supabase connection test failed: $e');
    }

    // Initialize audio service - ensure music is enabled by default
    try {
      final musicEnabled = await AudioService.instance.loadEnabled();
      debugPrint('🎵 Music enabled setting: $musicEnabled');
      if (musicEnabled) {
        await AudioService.instance.start();
        debugPrint('🎵 Audio service started successfully');
      }
    } catch (e) {
      debugPrint('❌ Audio initialization failed: $e');
    }

    // Initialize app lifecycle manager for background music control
    try {
      AppLifecycleManager.instance.initialize();
      debugPrint('🎵 App lifecycle manager initialized successfully');
    } catch (e) {
      debugPrint('❌ App lifecycle manager initialization failed: $e');
    }

    debugPrint('✅ App services initialized');
  } catch (e) {
    debugPrint('⚠️ Non-critical service initialization failed: $e');
  }
}

/// Error app shown when initialization fails
class InitializationErrorApp extends StatelessWidget {
  final Object error;

  const InitializationErrorApp({
    Key? key,
    required this.error,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GitaWisdom - Configuration Error',
      home: Scaffold(
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.error_outline,
                  size: 64,
                  color: Colors.red,
                ),
                const SizedBox(height: 16),
                const Text(
                  'Configuration Error',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                Text(
                  'The app could not initialize properly. Please check your configuration.',
                  textAlign: TextAlign.center,
                  style: TextStyle(color: Colors.grey[600]),
                ),
                if (Environment.isDevelopment) ...[
                  const SizedBox(height: 16),
                  Text(
                    'Error: $error',
                    textAlign: TextAlign.center,
                    style: const TextStyle(
                      fontSize: 12,
                      fontFamily: 'monospace',
                      color: Colors.red,
                    ),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }
}

  /*  // — Supabase
  await Supabase.initialize(
    url: 'https://wlfwdtdtiedlcczfoslt.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndsZndkdGR0aWVkbGNjemZvc2x0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjQ5MDAsImV4cCI6MjA2NzQ0MDkwMH0.OiWhZled2trJ7eTd8lpQ658B4p-IVsRp2HXHcgAUoFU',
  );

  // — Hive setup
  final appDocDir = await getApplicationDocumentsDirectory();
  Hive.init(appDocDir.path);
  await SettingsService.init();

  Hive.registerAdapter(ChapterAdapter());
  Hive.registerAdapter(JournalEntryAdapter());

  await Hive.openBox<Chapter>('chapters');
  try {
    await Hive.openBox<JournalEntry>('journal_entries');
  } on HiveError {
    await Hive.deleteBoxFromDisk('journal_entries');
    await Hive.openBox<JournalEntry>('journal_entries');
  }

  // — Audio
  final musicOn = await AudioService.instance.loadEnabled();
  if (musicOn) await AudioService.instance.start();

  runApp(const WisdomGuideApp());
}
  */



class WisdomGuideApp extends StatelessWidget {
  const WisdomGuideApp({Key? key}) : super(key: key);

  TextTheme _buildTextThemeWithShadows(TextTheme baseTheme, bool shadowEnabled) {
    if (!shadowEnabled) return baseTheme;
    
    // Create different shadow intensities for different text styles
    final headerShadows = [
      Shadow(
        color: Platform.isIOS ? Colors.black.withOpacity(0.6) : Colors.black45, // Stronger for headers on iOS
        offset: Platform.isIOS ? const Offset(1.5, 1.5) : const Offset(1.0, 1.0),
        blurRadius: Platform.isIOS ? 3.0 : 2.0,
      ),
    ];
    
    final bodyShadows = [
      Shadow(
        color: Platform.isIOS ? Colors.black.withOpacity(0.5) : Colors.black38, // Lighter for body text on iOS
        offset: Platform.isIOS ? const Offset(1.0, 1.0) : const Offset(0.8, 0.8),
        blurRadius: Platform.isIOS ? 2.0 : 1.5,
      ),
    ];
    
    final labelShadows = [
      Shadow(
        color: Platform.isIOS ? Colors.black45 : Colors.black.withOpacity(0.3), // Subtle for labels on iOS
        offset: Platform.isIOS ? const Offset(0.8, 0.8) : const Offset(0.5, 0.5),
        blurRadius: Platform.isIOS ? 1.5 : 1.0,
      ),
    ];

    return baseTheme.copyWith(
      // Headers - strongest shadow
      displayLarge: baseTheme.displayLarge?.copyWith(shadows: headerShadows),
      displayMedium: baseTheme.displayMedium?.copyWith(shadows: headerShadows),
      displaySmall: baseTheme.displaySmall?.copyWith(shadows: headerShadows),
      headlineLarge: baseTheme.headlineLarge?.copyWith(shadows: headerShadows),
      headlineMedium: baseTheme.headlineMedium?.copyWith(shadows: headerShadows),
      headlineSmall: baseTheme.headlineSmall?.copyWith(shadows: headerShadows),
      
      // Titles - medium shadow
      titleLarge: baseTheme.titleLarge?.copyWith(shadows: bodyShadows),
      titleMedium: baseTheme.titleMedium?.copyWith(shadows: bodyShadows),
      titleSmall: baseTheme.titleSmall?.copyWith(shadows: bodyShadows),
      
      // Body text - medium shadow
      bodyLarge: baseTheme.bodyLarge?.copyWith(shadows: bodyShadows),
      bodyMedium: baseTheme.bodyMedium?.copyWith(shadows: bodyShadows),
      bodySmall: baseTheme.bodySmall?.copyWith(shadows: bodyShadows),
      
      // Labels - subtle shadow
      labelLarge: baseTheme.labelLarge?.copyWith(shadows: labelShadows),
      labelMedium: baseTheme.labelMedium?.copyWith(shadows: labelShadows),
      labelSmall: baseTheme.labelSmall?.copyWith(shadows: labelShadows),
    );
  }

  /// Build app background - supports both image and theme-based backgrounds
  Widget _buildAppBackground(bool isDark, double opacity) {
    // Option 1: Theme-based background (currently active)
    return _buildThemeBasedBackground(isDark, opacity);
    
    // Option 2: Image-based background (commented out but preserved)
    // To switch back to image background, comment out the line above and uncomment below:
    // return _buildImageBackground(opacity);
  }

  /// Theme-based background with accent colors (not full bright/dark)
  Widget _buildThemeBasedBackground(bool isDark, double opacity) {
    if (isDark) {
      // Dark theme: Enhanced to match the quality of light theme
      return Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              const Color(0xFF2C2C2C).withOpacity(opacity), // Warmer dark base (like light theme warmth)
              const Color(0xFF3A3A3A).withOpacity(opacity), // Mid-tone for depth
              const Color(0xFF2E2E3E).withOpacity(opacity), // Subtle purple accent (elegant like light theme)
              const Color(0xFF404040).withOpacity(opacity), // Lighter edge for dimension
            ],
            stops: const [0.0, 0.4, 0.7, 1.0],
          ),
        ),
      );
    } else {
      // Light theme: Soft warm gray with subtle accent (#FAFAFA base)
      return Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              const Color(0xFFFAFAFA).withOpacity(opacity), // Soft white base
              const Color(0xFFF5F5F5).withOpacity(opacity), // Light gray for gradient
              const Color(0xFFF0F0F8).withOpacity(opacity), // Warm accent
            ],
            stops: const [0.0, 0.7, 1.0],
          ),
        ),
      );
    }
  }

  /// Image-based background (preserved for future use)
  Widget _buildImageBackground(double opacity) {
    return Opacity(
      opacity: opacity,
      child: Image.asset('assets/images/app_bg.png', fit: BoxFit.cover),
    );
  }

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<Box>(
      valueListenable: Hive.box(SettingsService.boxName).listenable(),
      builder: (context, box, _) {
        final isDark = box.get(SettingsService.darkKey, defaultValue: false) as bool;
        final fontPref = box.get(SettingsService.fontKey, defaultValue: 'medium') as String;
        final shadowEnabled = box.get(SettingsService.shadowKey, defaultValue: false) as bool;
        final backgroundOpacity = box.get(SettingsService.opacityKey, defaultValue: 1.0) as double;
        /* MULTILANG_TODO: final languageCode = box.get(SettingsService.langKey, defaultValue: 'en') as String; */
        
        double textScale;
        switch (fontPref) {
          case 'small':    textScale = 0.90; break; // Reduced scaling to prevent overflow
          case 'large':    textScale = 1.05; break; // Reduced scaling to prevent overflow
          default:         textScale = 1.0;
        }

        return MaterialApp(
          debugShowCheckedModeBanner: false,
          
          /* MULTILANG_TODO: Complex localization setup
          // Localization setup - use English for UI when Material doesn't support content language
          locale: () {
            const materialSupportedCodes = ['en', 'es', 'hi', 'de', 'fr', 'it'];
            return materialSupportedCodes.contains(languageCode) 
                ? Locale(languageCode) 
                : const Locale('en', '');
          }(),
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          localeResolutionCallback: (locale, supportedLocales) {
            // For unsupported Material locales, fallback to English UI but keep content language separate
            const materialSupportedCodes = ['en', 'es', 'hi', 'de', 'fr', 'it'];
            
            if (locale != null) {
              // Check if Material/Cupertino supports this locale
              if (materialSupportedCodes.contains(locale.languageCode)) {
                // Use the requested locale if Material supports it
                for (final supportedLocale in supportedLocales) {
                  if (supportedLocale.languageCode == locale.languageCode) {
                    return supportedLocale;
                  }
                }
              }
            }
            // Fallback to English for UI components (Material/Cupertino)
            // Content language is handled separately by EnhancedSupabaseService
            return const Locale('en', '');
          },
          supportedLocales: const [
            Locale('en', ''), // English
            Locale('es', ''), // Spanish  
            Locale('hi', ''), // Hindi
            Locale('de', ''), // German
            Locale('fr', ''), // French
            Locale('it', ''), // Italian
            Locale('sa', ''), // Sanskrit
            Locale('bn', ''), // Bengali
            Locale('gu', ''), // Gujarati
            Locale('ta', ''), // Tamil
            Locale('te', ''), // Telugu
            Locale('mr', ''), // Marathi
            Locale('pt', ''), // Portuguese
            Locale('ru', ''), // Russian
            Locale('kn', ''), // Kannada
          ],
          */
          
          // MVP: English-only localization
          locale: const Locale('en', ''),
          localizationsDelegates: const [
            AppLocalizations.delegate,
            GlobalMaterialLocalizations.delegate,
            GlobalWidgetsLocalizations.delegate,
            GlobalCupertinoLocalizations.delegate,
          ],
          supportedLocales: const [
            Locale('en', ''), // English only for MVP
          ],
          
          theme: ThemeData.light().copyWith(
            scaffoldBackgroundColor: Colors.transparent,
            textTheme: _buildTextThemeWithShadows(
              GoogleFonts.poppinsTextTheme(ThemeData.light().textTheme),
              shadowEnabled,
            ),
            cardTheme: CardThemeData(
              color: ThemeData.light().colorScheme.surface,
              elevation: 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
              margin: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
          darkTheme: ThemeData.dark().copyWith(
            scaffoldBackgroundColor: Colors.transparent,
            textTheme: _buildTextThemeWithShadows(
              GoogleFonts.poppinsTextTheme(ThemeData.dark().textTheme),
              shadowEnabled,
            ),
            cardTheme: CardThemeData(
              color: ThemeData.dark().colorScheme.surface,
              elevation: 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
              margin: const EdgeInsets.symmetric(vertical: 8),
            ),
          ),
          themeMode: isDark ? ThemeMode.dark : ThemeMode.light,
          builder: (context, child) {
            final mq = MediaQuery.of(context).copyWith(textScaler: TextScaler.linear(textScale));
            return MediaQuery(
              data: mq,
              child: Stack(
                children: [
                  // Background system - choose between image and theme-based
                  Positioned.fill(
              //                     child: Opacity(
              //                            opacity: backgroundOpacity,
              //                            child: Image.asset('assets/images/app_bg.png', fit: BoxFit.cover),
              //                     ),

                    child: _buildAppBackground(isDark, backgroundOpacity),
                  ),
                  if (child != null) child,
                ],
              ),
            );
          },
          home: const SplashScreen(),
        );
      },
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin {
  @override
  void initState() {
    super.initState();
    
    // Initialize remaining services while showing splash screen
    _initializeAppServices();
    
    // Navigate to root after 3 seconds
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const RootScaffold()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    // Create platform-aware SystemUiOverlayStyle
    // On Android 15+, these values are handled by styles.xml
    final systemUiOverlayStyle = Platform.isIOS || Platform.isMacOS 
        ? const SystemUiOverlayStyle(
            statusBarColor: Colors.transparent,
            statusBarIconBrightness: Brightness.light,
            systemNavigationBarColor: Colors.transparent,
          )
        : SystemUiOverlayStyle.light.copyWith(
            statusBarColor: Colors.transparent,
            systemNavigationBarColor: Colors.transparent,
          );
    
    return AnnotatedRegion<SystemUiOverlayStyle>(
      value: systemUiOverlayStyle,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        extendBody: true,
        body: SizedBox(
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          child: Container(
            decoration: const BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/app_bg.png'),
                fit: BoxFit.cover,
              ),
            ),
            child: SafeArea(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // App logo or loading indicator
                    const Icon(
                      Icons.auto_stories,
                      size: 80,
                      color: Colors.white,
                    ),
                    const SizedBox(height: 20),
                    Text(
                      'GitaWisdom',
                      style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 40),
                    const CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// Public navigation methods
class NavigationHelper {
  static void goToScenariosWithChapter(int chapterId) {
    _RootScaffoldState.goToScenariosWithChapter(chapterId);
  }
  
  static void goToTab(int index) {
    _RootScaffoldState.goToTab(index);
  }
}

class RootScaffold extends StatefulWidget {
  const RootScaffold({Key? key}) : super(key: key);
  @override
  State<RootScaffold> createState() => _RootScaffoldState();
}

class _RootScaffoldState extends State<RootScaffold> with WidgetsBindingObserver {
  static _RootScaffoldState? _instance;
  int _currentIndex = 0;
  int? _pendingChapterFilter; // Store chapter filter to apply to scenarios tab
  late List<Widget> _pages; // Cache pages to prevent recreation

  static void goToTab(int index) => _instance?._selectTab(index);
  
  static void goToScenariosWithChapter(int chapterId) {
    _instance?._goToScenariosWithChapter(chapterId);
  }

  @override
  void initState() {
    super.initState();
    _instance = this;
    _initializePages();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    // Reset to home screen when app resumes from background or becomes active
    if (state == AppLifecycleState.resumed && _currentIndex != 0) {
      debugPrint('🏠 App resumed - resetting to home screen');
      _selectTab(0);
    }
  }

  void _initializePages() {
    _pages = [
      HomeScreen(onTabChange: _selectTab),
      ChapterScreen(),
      ScenariosScreen(
        key: ValueKey('chapter_filter_${_pendingChapterFilter ?? 'all'}'),
        filterChapter: _pendingChapterFilter,
      ),
    //  JournalScreen(),
      MoreScreen(),
    ];
  }
  
  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _instance = null;
    super.dispose();
  }

  void _selectTab(int index) {
    setState(() {
      _currentIndex = index;
    });
  }
  
  void _goToScenariosWithChapter(int chapterId) {
    debugPrint('🔧 NavigationHelper._goToScenariosWithChapter: chapterId=$chapterId');
    _pendingChapterFilter = chapterId;
    
    // Update scenarios screen with new filter (use unique key to force rebuild)
    setState(() {
      _pages[2] = ScenariosScreen(
        key: ValueKey('chapter_filter_$_pendingChapterFilter'),
        filterChapter: _pendingChapterFilter,
      );
      _currentIndex = 2; // Switch to scenarios tab (index 2)
    });
    debugPrint('🔧 NavigationHelper._goToScenariosWithChapter: Switched to scenarios tab with filter=$_pendingChapterFilter');
  }

  Future<bool> _onWillPop() async {
    // Simple back navigation - go to home tab if not already there
    if (_currentIndex != 0) {
      setState(() => _currentIndex = 0);
      return false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;
    
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        body: Stack(
          children: [
            // Background image for main scaffold
            Positioned.fill(
              child: Image.asset(
                'assets/images/app_bg.png',
                fit: BoxFit.cover,
                color: isDark ? Color.fromARGB((0.32 * 255).toInt(), 0, 0, 0) : null, // Using Color.fromARGB instead of withAlpha
                colorBlendMode: isDark ? BlendMode.darken : null,
              ),
            ),
            // Simple IndexedStack for tab navigation - eliminates Navigator issues
            IndexedStack(
              index: _currentIndex,
              children: _pages,
            ),
          ],
        ),
        bottomNavigationBar: CustomNavBar(
          currentIndex: _currentIndex,
          onTap: (i) => _selectTab(i),
          items: [
            NavBarItem(icon: Icons.home, label: AppLocalizations.of(context)!.homeTab),
            NavBarItem(icon: Icons.menu_book, label: AppLocalizations.of(context)!.chaptersTab),
            NavBarItem(icon: Icons.list, label: AppLocalizations.of(context)!.scenariosTab),
         //   NavBarItem(icon: Icons.book, label: AppLocalizations.of(context)!.journalTab),
            NavBarItem(icon: Icons.more_horiz, label: AppLocalizations.of(context)!.moreTab),
          ],
        ),
      ),
    );
  }
}
